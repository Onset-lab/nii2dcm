# Workflow to build nii2dcm, run unit tests and then execute command line interface (CLI) end-to-end

name: Build & Test nii2dcm

on:
  pull_request:

jobs:
  venv-build-and-test:
    name: venv + E2E

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ '3.9' ]

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Python packages
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel
        pip install flake8 pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Install nii2dcm
      run: |
        pip install -e .

    - name: Test nii2dcm install
      run: |
        convert_nii2dcm.py -h
        convert_nii2dcm.py -v

    - name: Test DicomMRI creation
      run: |
        # run nii2dcm
        mkdir output
        convert_nii2dcm.py tests/data/DicomMRISVR/t2-svr-atlas-35wk.nii.gz ./output -d MR
        ls ./output
        # assert DICOM files exist
        [ -f "./output/IM_0001.dcm" ] && echo "Output DICOM file exists" || exit 1

  container-build-and-test:
    name: Container

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python-version: [ '3.9' ]

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Build container
        run: |
          docker build -t nii2dcm --progress=plain --no-cache .
          docker ps

      - name: Test nii2dcm container
        run: |
          docker run nii2dcm -h
          echo "nii2dcm version:"
          docker run nii2dcm -v
